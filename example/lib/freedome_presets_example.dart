/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è FreeDome Sphere –ø—Ä–µ–¥–Ω–∞—Å—Ç—Ä–æ–µ–∫
///
/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–µ–¥–Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
/// - –ì—Ä–æ–±–æ–≤–∞—è —Ç–∏—à–∏–Ω–∞
/// - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É–º–∞–Ω–∞
/// - –ü–æ–ª–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç—É–º–∞–Ω–∞
/// - –ü–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º –∫—É–ø–æ–ª–∞
/// - –ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞

import 'package:flutter/material.dart';
import 'package:flutter_freedome/flutter_freedome.dart';

class FreeDomePresetsExample extends StatefulWidget {
  const FreeDomePresetsExample({super.key});

  @override
  State<FreeDomePresetsExample> createState() => _FreeDomePresetsExampleState();
}

class _FreeDomePresetsExampleState extends State<FreeDomePresetsExample> {
  final FreeDomeProvider _freedome = FreeDomeProvider();

  bool _isInitialized = false;
  bool _isConnected = false;
  String _status = '–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω';
  Map<String, dynamic>? _quantumStatus;

  @override
  void initState() {
    super.initState();
    _initializeFreeDome();
  }

  Future<void> _initializeFreeDome() async {
    try {
      setState(() {
        _status = '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...';
      });

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FreeDome
      final initialized = await _freedome.initialize();
      if (!initialized) {
        setState(() {
          _status = '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏';
        });
        return;
      }

      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫—É–ø–æ–ª—É
      final connected = await _freedome.connectToNearestDome();

      setState(() {
        _isInitialized = true;
        _isConnected = connected;
        _status = connected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫—É–ø–æ–ª—É' : '–ö—É–ø–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω';
      });

      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
      _updateQuantumStatus();
    } catch (e) {
      setState(() {
        _status = '–û—à–∏–±–∫–∞: $e';
      });
    }
  }

  void _updateQuantumStatus() {
    if (_isInitialized) {
      setState(() {
        _quantumStatus = _freedome.getQuantumSystemsStatus();
      });
    }
  }

  Future<void> _activatePreset(
      String presetName, Future<bool> Function() presetFunction) async {
    try {
      setState(() {
        _status = '–ê–∫—Ç–∏–≤–∞—Ü–∏—è $presetName...';
      });

      final success = await presetFunction();

      setState(() {
        _status = success
            ? '$presetName –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
            : '–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ $presetName';
      });

      _updateQuantumStatus();
    } catch (e) {
      setState(() {
        _status = '–û—à–∏–±–∫–∞: $e';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('FreeDome Sphere - –ü—Ä–µ–¥–Ω–∞—Å—Ç—Ä–æ–π–∫–∏'),
        backgroundColor: Colors.deepPurple,
        foregroundColor: Colors.white,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            Card(
              color: _isConnected ? Colors.green.shade50 : Colors.red.shade50,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      '–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã',
                      style: Theme.of(context).textTheme.titleMedium?.copyWith(
                            fontWeight: FontWeight.bold,
                          ),
                    ),
                    const SizedBox(height: 8),
                    Text('–°–æ—Å—Ç–æ—è–Ω–∏–µ: $_status'),
                    Text('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${_isInitialized ? "–î–∞" : "–ù–µ—Ç"}'),
                    Text('–ü–æ–¥–∫–ª—é—á–µ–Ω: ${_isConnected ? "–î–∞" : "–ù–µ—Ç"}'),
                  ],
                ),
              ),
            ),

            const SizedBox(height: 16),

            // –°—Ç–∞—Ç—É—Å –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
            if (_quantumStatus != null) ...[
              Card(
                color: Colors.blue.shade50,
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        '–ö–≤–∞–Ω—Ç–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã',
                        style:
                            Theme.of(context).textTheme.titleMedium?.copyWith(
                                  fontWeight: FontWeight.bold,
                                ),
                      ),
                      const SizedBox(height: 8),
                      Text('–¢—É–º–∞–Ω: ${_quantumStatus!['fog']['mode']}'),
                      Text('–¢–∏—à–∏–Ω–∞: ${_quantumStatus!['silence']['mode']}'),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 16),
            ],

            // –ö–Ω–æ–ø–∫–∏ –ø—Ä–µ–¥–Ω–∞—Å—Ç—Ä–æ–µ–∫
            Text(
              '–ü—Ä–µ–¥–Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
              style: Theme.of(context).textTheme.titleLarge?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
            ),
            const SizedBox(height: 16),

            // –ì—Ä–æ–±–æ–≤–∞—è —Ç–∏—à–∏–Ω–∞
            _buildPresetButton(
              'üîá –ì—Ä–æ–±–æ–≤–∞—è —Ç–∏—à–∏–Ω–∞',
              '–ü–æ–ª–Ω–æ–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ –∑–≤—É–∫–∞ (95-99%)',
              () => _activatePreset(
                '–ì—Ä–æ–±–æ–≤–∞—è —Ç–∏—à–∏–Ω–∞',
                () => _freedome.presetGraveSilence(
                  duration: const Duration(minutes: 5),
                  applyLocally: true,
                ),
              ),
            ),

            const SizedBox(height: 8),

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É–º–∞–Ω–∞
            _buildPresetButton(
              'üå´Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É–º–∞–Ω–∞',
              '–°—Ä–µ–¥–∞ –¥–ª—è –≥–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ü–∏–π',
              () => _activatePreset(
                '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É–º–∞–Ω–∞',
                () => _freedome.presetFogGeneration(
                  duration: const Duration(minutes: 30),
                  applyLocally: true,
                ),
              ),
            ),

            const SizedBox(height: 8),

            // –ü–æ–ª–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç—É–º–∞–Ω–∞
            _buildPresetButton(
              'üå§Ô∏è –ü–æ–ª–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç—É–º–∞–Ω–∞',
              '–û—á–∏—Å—Ç–∫–∞ –∫—É–ø–æ–ª–∞ (100% —Ä–∞—Å—Å–µ–∏–≤–∞–Ω–∏–µ)',
              () => _activatePreset(
                '–ü–æ–ª–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç—É–º–∞–Ω–∞',
                () => _freedome.presetNoFog(
                  duration: const Duration(minutes: 10),
                  applyLocally: true,
                ),
              ),
            ),

            const SizedBox(height: 8),

            // –ü–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º –∫—É–ø–æ–ª–∞
            _buildPresetButton(
              'üé™ –ü–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º –∫—É–ø–æ–ª–∞',
              '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É–º–∞–Ω–∞ + –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è',
              () => _activatePreset(
                '–ü–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º –∫—É–ø–æ–ª–∞',
                () => _freedome.presetFullDomeMode(
                  duration: const Duration(minutes: 45),
                  applyLocally: true,
                ),
              ),
            ),

            const SizedBox(height: 8),

            // –ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞
            _buildPresetButton(
              'üßò –ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞',
              '–ú—è–≥–∫–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –¥–ª—è —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏',
              () => _activatePreset(
                '–ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞',
                () => _freedome.presetMeditativeAtmosphere(
                  duration: const Duration(minutes: 60),
                  applyLocally: true,
                ),
              ),
            ),

            const SizedBox(height: 24),

            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            Row(
              children: [
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: _isInitialized
                        ? () async {
                            await _freedome.stopAllQuantumSystems();
                            _updateQuantumStatus();
                            setState(() {
                              _status = '–í—Å–µ —Å–∏—Å—Ç–µ–º—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã';
                            });
                          }
                        : null,
                    icon: const Icon(Icons.stop),
                    label: const Text('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.red,
                      foregroundColor: Colors.white,
                    ),
                  ),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: _updateQuantumStatus,
                    icon: const Icon(Icons.refresh),
                    label: const Text('–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue,
                      foregroundColor: Colors.white,
                    ),
                  ),
                ),
              ],
            ),

            const SizedBox(height: 16),

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            Card(
              color: Colors.amber.shade50,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                      style: Theme.of(context).textTheme.titleMedium?.copyWith(
                            fontWeight: FontWeight.bold,
                          ),
                    ),
                    const SizedBox(height: 8),
                    const Text(
                      '‚Ä¢ –í—Å–µ –ø—Ä–µ–¥–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏\n'
                      '‚Ä¢ –í —Ä–µ–∞–ª—å–Ω–æ–º –∫—É–ø–æ–ª–µ —Å–∏—Å—Ç–µ–º—ã –±—É–¥—É—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã\n'
                      '‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n'
                      '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ" –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏',
                      style: TextStyle(fontSize: 12),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildPresetButton(
      String title, String description, VoidCallback onPressed) {
    return ElevatedButton(
      onPressed: _isInitialized ? onPressed : null,
      style: ElevatedButton.styleFrom(
        padding: const EdgeInsets.all(16),
        alignment: Alignment.centerLeft,
        backgroundColor: _isInitialized ? Colors.deepPurple : Colors.grey,
        foregroundColor: Colors.white,
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: const TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            description,
            style: const TextStyle(
              fontSize: 12,
              color: Colors.white70,
            ),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _freedome.dispose();
    super.dispose();
  }
}

/// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–∞
void main() {
  runApp(
    MaterialApp(
      title: 'FreeDome Sphere - –ü—Ä–µ–¥–Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
      theme: ThemeData(
        primarySwatch: Colors.deepPurple,
        useMaterial3: true,
      ),
      home: const FreeDomePresetsExample(),
    ),
  );
}
