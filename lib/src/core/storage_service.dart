import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:isar/isar.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import 'package:path_provider/path_provider.dart';
import '../models/offline_models.dart';

/// –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (2025 best practices)
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Isar –¥–ª—è NoSQL –¥–∞–Ω–Ω—ã—Ö –∏ SQLite –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
class FreeDomeStorageService extends ChangeNotifier {
  static final FreeDomeStorageService _instance = FreeDomeStorageService._internal();
  factory FreeDomeStorageService() => _instance;
  FreeDomeStorageService._internal();

  /// Isar –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫—ç—à–∞ –∏ –æ—Ñ–ª–∞–π–Ω –æ–ø–µ—Ä–∞—Ü–∏–π
  Isar? _isar;
  
  /// SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  Database? _database;
  
  /// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
  OfflineSettings _settings = const OfflineSettings();
  
  /// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–æ–±—ã—Ç–∏–π
  final StreamController<OfflineEvent> _eventController =
      StreamController<OfflineEvent>.broadcast();

  /// –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  OfflineMetrics _metrics = const OfflineMetrics();

  /// –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
  Timer? _cleanupTimer;

  /// –ì–µ—Ç—Ç–µ—Ä—ã
  Isar? get isar => _isar;
  Database? get database => _database;
  OfflineSettings get settings => _settings;
  OfflineMetrics get metrics => _metrics;
  Stream<OfflineEvent> get eventStream => _eventController.stream;
  bool get isInitialized => _isar != null && _database != null;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  Future<void> initialize({OfflineSettings? customSettings}) async {
    if (isInitialized) return;

    try {
      _settings = customSettings ?? const OfflineSettings();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Isar –¥–ª—è NoSQL –¥–∞–Ω–Ω—ã—Ö
      await _initializeIsar();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      await _initializeSQLite();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
      _setupCleanupTimer();
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
      await _updateMetrics();

      if (kDebugMode) {
        print('‚úÖ FreeDomeStorageService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        print('üìä Isar –∫–æ–ª–ª–µ–∫—Ü–∏–∏: ${_isar?.schemas.length}');
        print('üóÑÔ∏è  SQLite –≤–µ—Ä—Å–∏—è: ${await _database?.getVersion()}');
      }

      _emitEvent(OfflineModeChangedEvent(true, 'Storage initialized'));
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: $e');
      }
      rethrow;
    }
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Isar –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  Future<void> _initializeIsar() async {
    final dir = await getApplicationDocumentsDirectory();
    
    _isar = await Isar.open([
      CacheEntrySchema,
      OfflineOperationSchema,
    ], 
    directory: dir.path,
    name: 'freedome_cache',
    );
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  Future<void> _initializeSQLite() async {
    final databasesPath = await getDatabasesPath();
    final path = join(databasesPath, 'freedome_structured.db');

    _database = await openDatabase(
      path,
      version: 2,
      onCreate: _createTables,
      onUpgrade: _upgradeTables,
    );
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü SQLite
  Future<void> _createTables(Database db, int version) async {
    // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await db.execute('''
      CREATE TABLE settings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        key TEXT UNIQUE NOT NULL,
        value TEXT NOT NULL,
        type TEXT NOT NULL,
        created_at INTEGER NOT NULL,
        updated_at INTEGER NOT NULL
      )
    ''');

    // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π
    await db.execute('''
      CREATE TABLE user_sessions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        session_id TEXT UNIQUE NOT NULL,
        user_id TEXT NOT NULL,
        dome_id TEXT,
        role TEXT NOT NULL,
        permissions TEXT NOT NULL,
        created_at INTEGER NOT NULL,
        expires_at INTEGER,
        is_active INTEGER NOT NULL DEFAULT 1
      )
    ''');

    // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤
    await db.execute('''
      CREATE TABLE system_logs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        level TEXT NOT NULL,
        message TEXT NOT NULL,
        category TEXT NOT NULL,
        metadata TEXT,
        created_at INTEGER NOT NULL
      )
    ''');

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    await db.execute('CREATE INDEX idx_settings_key ON settings(key)');
    await db.execute('CREATE INDEX idx_sessions_user ON user_sessions(user_id)');
    await db.execute('CREATE INDEX idx_logs_level ON system_logs(level)');
    await db.execute('CREATE INDEX idx_logs_category ON system_logs(category)');
    await db.execute('CREATE INDEX idx_logs_created ON system_logs(created_at)');
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  Future<void> _upgradeTables(Database db, int oldVersion, int newVersion) async {
    if (oldVersion < 2) {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ –≤–µ—Ä—Å–∏–∏ 2
      await db.execute('ALTER TABLE user_sessions ADD COLUMN last_activity INTEGER');
      await db.execute('ALTER TABLE system_logs ADD COLUMN source TEXT');
    }
  }

  /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
  void _setupCleanupTimer() {
    if (!_settings.autoCleanExpiredCache) return;

    _cleanupTimer?.cancel();
    _cleanupTimer = Timer.periodic(_settings.cacheCleanupInterval, (_) {
      _performAutomaticCleanup();
    });
  }

  // === CACHE OPERATIONS ===

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à
  Future<void> cacheData({
    required String key,
    required dynamic data,
    Duration? ttl,
    List<String> tags = const [],
    int priority = 0,
  }) async {
    if (_isar == null) throw StateError('Storage not initialized');

    try {
      final jsonData = json.encode(data);
      final expiry = ttl != null ? DateTime.now().add(ttl) : null;
      
      final entry = CacheEntry.create(
        key: key,
        data: jsonData,
        expiry: expiry,
        tags: tags,
        priority: priority,
      );

      await _isar!.writeTxn(() async {
        await _isar!.cacheEntrys.put(entry);
      });

      _emitEvent(DataCachedEvent(key, jsonData.length, tags));
      await _updateMetrics();

      if (kDebugMode) {
        print('üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω: $key (${jsonData.length} –±–∞–π—Ç)');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è $key: $e');
      }
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
  Future<T?> getCachedData<T>(String key) async {
    if (_isar == null) return null;

    try {
      final entry = await _isar!.cacheEntrys.filter().keyEqualTo(key).findFirst();
      
      if (entry == null) {
        _emitEvent(CacheMissEvent(key));
        return null;
      }

      if (entry.isExpired) {
        await _removeCacheEntry(key);
        _emitEvent(CacheMissEvent(key));
        return null;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–∞
      entry.updateAccess();
      await _isar!.writeTxn(() async {
        await _isar!.cacheEntrys.put(entry);
      });

      final data = json.decode(entry.data);
      _emitEvent(CacheHitEvent(key, Duration.zero));
      
      return data as T?;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞ $key: $e');
      }
      return null;
    }
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞
  Future<bool> removeCacheEntry(String key) async {
    return await _removeCacheEntry(key);
  }

  Future<bool> _removeCacheEntry(String key) async {
    if (_isar == null) return false;

    try {
      final deleted = await _isar!.writeTxn(() async {
        return await _isar!.cacheEntrys.filter().keyEqualTo(key).deleteFirst();
      });

      if (deleted) {
        _emitEvent(DataRemovedEvent(key, 'Manual removal'));
        await _updateMetrics();
      }

      return deleted;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞ $key: $e');
      }
      return false;
    }
  }

  /// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ —Ç–µ–≥–∞–º
  Future<int> clearCacheByTags(List<String> tags) async {
    if (_isar == null) return 0;

    try {
      int removedCount = 0;
      
      await _isar!.writeTxn(() async {
        for (final tag in tags) {
          final count = await _isar!.cacheEntrys
              .filter()
              .tagsElementContains(tag)
              .deleteAll();
          removedCount += count;
        }
      });

      _emitEvent(CacheClearedEvent(tags, removedCount));
      await _updateMetrics();
      
      return removedCount;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –ø–æ —Ç–µ–≥–∞–º: $e');
      }
      return 0;
    }
  }

  /// –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
  Future<int> clearAllCache() async {
    if (_isar == null) return 0;

    try {
      final count = await _isar!.writeTxn(() async {
        return await _isar!.cacheEntrys.clear();
      });

      _emitEvent(CacheClearedEvent(null, count));
      await _updateMetrics();
      
      return count;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: $e');
      }
      return 0;
    }
  }

  // === OFFLINE OPERATIONS ===

  /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å
  Future<void> queueOperation(OfflineOperation operation) async {
    if (_isar == null) throw StateError('Storage not initialized');

    try {
      await _isar!.writeTxn(() async {
        await _isar!.offlineOperations.put(operation);
      });

      _emitEvent(OperationQueuedEvent(operation));
      await _updateMetrics();

      if (kDebugMode) {
        print('üì§ –û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: ${operation.type}');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å: $e');
      }
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏
  Future<List<OfflineOperation>> getPendingOperations({int? limit}) async {
    if (_isar == null) return [];

    try {
      var query = _isar!.offlineOperations
          .filter()
          .statusEqualTo(OfflineOperationStatus.pending)
          .or()
          .statusEqualTo(OfflineOperationStatus.retrying)
          .sortByPriorityDesc()
          .thenByCreatedAt();

      if (limit != null) {
        query = query.limit(limit);
      }

      return await query.findAll();
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏: $e');
      }
      return [];
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
  Future<void> updateOperationStatus(
    String operationId,
    OfflineOperationStatus status, {
    String? errorMessage,
  }) async {
    if (_isar == null) return;

    try {
      final operation = await _isar!.offlineOperations
          .filter()
          .operationIdEqualTo(operationId)
          .findFirst();

      if (operation != null) {
        final updatedOperation = operation.copyWith(
          status: status,
          errorMessage: errorMessage,
          lastAttemptAt: DateTime.now(),
          completedAt: status == OfflineOperationStatus.completed 
              ? DateTime.now() 
              : null,
        );

        await _isar!.writeTxn(() async {
          await _isar!.offlineOperations.put(updatedOperation);
        });

        // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
        switch (status) {
          case OfflineOperationStatus.completed:
            _emitEvent(OperationCompletedEvent(updatedOperation, Duration.zero));
            break;
          case OfflineOperationStatus.failed:
            _emitEvent(OperationFailedEvent(
              updatedOperation, 
              errorMessage ?? 'Unknown error',
              updatedOperation.canRetry,
            ));
            break;
          case OfflineOperationStatus.processing:
            _emitEvent(OperationStartedEvent(updatedOperation));
            break;
          default:
            break;
        }

        await _updateMetrics();
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ $operationId: $e');
      }
    }
  }

  // === STRUCTURED DATA OPERATIONS ===

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ SQLite
  Future<void> saveSetting(String key, dynamic value) async {
    if (_database == null) throw StateError('Database not initialized');

    try {
      final now = DateTime.now().millisecondsSinceEpoch;
      
      await _database!.insert(
        'settings',
        {
          'key': key,
          'value': json.encode(value),
          'type': value.runtimeType.toString(),
          'created_at': now,
          'updated_at': now,
        },
        conflictAlgorithm: ConflictAlgorithm.replace,
      );

      if (kDebugMode) {
        print('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: $key');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ $key: $e');
      }
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ SQLite
  Future<T?> getSetting<T>(String key) async {
    if (_database == null) return null;

    try {
      final result = await _database!.query(
        'settings',
        where: 'key = ?',
        whereArgs: [key],
        limit: 1,
      );

      if (result.isEmpty) return null;

      final value = json.decode(result.first['value'] as String);
      return value as T?;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ $key: $e');
      }
      return null;
    }
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ SQLite
  Future<void> logMessage({
    required String level,
    required String message,
    required String category,
    Map<String, dynamic>? metadata,
    String? source,
  }) async {
    if (_database == null) return;

    try {
      await _database!.insert('system_logs', {
        'level': level,
        'message': message,
        'category': category,
        'metadata': metadata != null ? json.encode(metadata) : null,
        'source': source,
        'created_at': DateTime.now().millisecondsSinceEpoch,
      });
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: $e');
      }
    }
  }

  // === MAINTENANCE OPERATIONS ===

  /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  Future<void> _performAutomaticCleanup() async {
    try {
      int removedCount = 0;

      // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–µ–≥–æ –∫—ç—à–∞
      if (_isar != null) {
        final now = DateTime.now();
        removedCount = await _isar!.writeTxn(() async {
          return await _isar!.cacheEntrys
              .filter()
              .expiryIsNotNull()
              .expiryLessThan(now)
              .deleteAll();
        });
      }

      // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
      if (_database != null) {
        final thirtyDaysAgo = DateTime.now()
            .subtract(const Duration(days: 30))
            .millisecondsSinceEpoch;
            
        await _database!.delete(
          'system_logs',
          where: 'created_at < ?',
          whereArgs: [thirtyDaysAgo],
        );
      }

      if (removedCount > 0) {
        _emitEvent(CacheClearedEvent(['expired'], removedCount));
        await _updateMetrics();
        
        if (kDebugMode) {
          print('üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω–æ $removedCount –∑–∞–ø–∏—Å–µ–π');
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏: $e');
      }
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  Future<void> _updateMetrics() async {
    try {
      int totalCacheEntries = 0;
      int cacheSize = 0;
      int queuedOperations = 0;
      int completedOperations = 0;
      int failedOperations = 0;

      if (_isar != null) {
        totalCacheEntries = await _isar!.cacheEntrys.count();
        
        final cacheEntries = await _isar!.cacheEntrys.findAll();
        cacheSize = cacheEntries.fold<int>(0, (sum, entry) => sum + entry.dataSize);

        queuedOperations = await _isar!.offlineOperations
            .filter()
            .statusEqualTo(OfflineOperationStatus.pending)
            .count();

        completedOperations = await _isar!.offlineOperations
            .filter()
            .statusEqualTo(OfflineOperationStatus.completed)
            .count();

        failedOperations = await _isar!.offlineOperations
            .filter()
            .statusEqualTo(OfflineOperationStatus.failed)
            .count();
      }

      _metrics = OfflineMetrics(
        totalCacheEntries: totalCacheEntries,
        cacheSize: cacheSize,
        queuedOperations: queuedOperations,
        completedOperations: completedOperations,
        failedOperations: failedOperations,
        cacheHitRate: _calculateCacheHitRate(),
        lastSyncTime: DateTime.now(),
        createdAt: DateTime.now(),
      );

      _emitEvent(MetricsUpdatedEvent(_metrics));
      notifyListeners();
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: $e');
      }
    }
  }

  /// –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à
  double _calculateCacheHitRate() {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    return 85.0; // –ó–∞–≥–ª—É—à–∫–∞
  }

  /// –≠–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
  void _emitEvent(OfflineEvent event) {
    _eventController.add(event);
    
    if (_settings.enableMetrics) {
      // –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
      if (event is OperationFailedEvent || event is StorageQuotaExceededEvent) {
        logMessage(
          level: 'ERROR',
          message: 'Storage event: ${event.eventType}',
          category: 'storage',
          metadata: {'event': event.toString()},
        );
      }
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  Map<String, dynamic> getStorageStats() {
    return {
      'isInitialized': isInitialized,
      'settings': _settings.toJson(),
      'metrics': _metrics.toJson(),
      'isar': {
        'isOpen': _isar?.isOpen ?? false,
        'schemas': _isar?.schemas.length ?? 0,
      },
      'sqlite': {
        'isOpen': _database?.isOpen ?? false,
        'path': _database?.path,
      },
    };
  }

  /// –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  @override
  void dispose() {
    _cleanupTimer?.cancel();
    _eventController.close();
    _isar?.close();
    _database?.close();
    super.dispose();
  }
}
