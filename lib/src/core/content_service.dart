import 'dart:async';
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'connection_service.dart';
import 'auth_service.dart';
import '../models/content_models.dart';
import '../models/dome_models.dart';
import '../models/calibration_models.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º FreeDome
class FreeDomeContentService extends ChangeNotifier {
  static final FreeDomeContentService _instance =
      FreeDomeContentService._internal();
  factory FreeDomeContentService() => _instance;
  FreeDomeContentService._internal();

  final FreeDomeConnectionService _connectionService =
      FreeDomeConnectionService();
  final FreeDomeAuthService _authService = FreeDomeAuthService();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
  PlaybackState _playbackState = const PlaybackState();

  // –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  final List<ProjectionContent> _contentLibrary = [];
  final List<Playlist> _playlists = [];

  // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã —Å–æ–±—ã—Ç–∏–π
  final StreamController<PlaybackState> _playbackController =
      StreamController<PlaybackState>.broadcast();

  // –ì–µ—Ç—Ç–µ—Ä—ã
  PlaybackState get playbackState => _playbackState;
  List<ProjectionContent> get contentLibrary => List.from(_contentLibrary);
  List<Playlist> get playlists => List.from(_playlists);
  Stream<PlaybackState> get playbackStream => _playbackController.stream;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize() async {
    try {
      await _loadContentLibrary();
      await _loadPlaylists();

      if (kDebugMode) {
        print('‚úÖ FreeDomeContentService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        print('üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${_contentLibrary.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
        print('üéµ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${_playlists.length} –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FreeDomeContentService: $e');
      }
    }
  }

  /// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  Future<bool> playContent(dynamic content) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    if (!_authService.hasPermission(FreeDomePermission.playContent)) {
      if (kDebugMode) {
        print('‚ùå –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
      }
      return false;
    }

    if (!_connectionService.isConnected) {
      if (kDebugMode) {
        print('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FreeDome —Å–∏—Å—Ç–µ–º–µ');
      }
      return false;
    }

    try {
      _updatePlaybackState(status: PlaybackStatus.buffering);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      final command = FreeDomeCommand(
        type: 'play_content',
        data: content.toFreeDomeData(),
        targetSystemId: _connectionService.activeDome?.id,
        sessionId: _authService.currentSession?.id,
        timestamp: DateTime.now(),
      );

      final response = await _connectionService.sendCommand(command);

      if (response.success) {
        _updatePlaybackState(
          status: PlaybackStatus.playing,
          currentContentId: content.id,
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if (content is ProjectionContent) {
          await _updateContentStats(content);
        }

        if (kDebugMode) {
          print('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è: ${content.name}');
        }

        return true;
      } else {
        _updatePlaybackState(
          status: PlaybackStatus.error,
          error: response.error,
        );
        return false;
      }
    } catch (e) {
      _updatePlaybackState(
        status: PlaybackStatus.error,
        error: e.toString(),
      );

      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: $e');
      }

      return false;
    }
  }

  /// –ü–∞—É–∑–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
  Future<bool> pausePlayback() async {
    if (!_authService.hasPermission(FreeDomePermission.playContent)) {
      return false;
    }

    try {
      final command = FreeDomeCommand(
        type: 'pause_playback',
        data: {},
        targetSystemId: _connectionService.activeDome?.id,
        sessionId: _authService.currentSession?.id,
        timestamp: DateTime.now(),
      );

      final response = await _connectionService.sendCommand(command);

      if (response.success) {
        _updatePlaybackState(status: PlaybackStatus.paused);
        return true;
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –ø–∞—É–∑—ã: $e');
      }
    }

    return false;
  }

  /// –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
  Future<bool> resumePlayback() async {
    if (!_authService.hasPermission(FreeDomePermission.playContent)) {
      return false;
    }

    try {
      final command = FreeDomeCommand(
        type: 'resume_playback',
        data: {},
        targetSystemId: _connectionService.activeDome?.id,
        sessionId: _authService.currentSession?.id,
        timestamp: DateTime.now(),
      );

      final response = await _connectionService.sendCommand(command);

      if (response.success) {
        _updatePlaybackState(status: PlaybackStatus.playing);
        return true;
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $e');
      }
    }

    return false;
  }

  /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
  Future<bool> stopPlayback() async {
    if (!_authService.hasPermission(FreeDomePermission.playContent)) {
      return false;
    }

    try {
      final command = FreeDomeCommand(
        type: 'stop_playback',
        data: {},
        targetSystemId: _connectionService.activeDome?.id,
        sessionId: _authService.currentSession?.id,
        timestamp: DateTime.now(),
      );

      final response = await _connectionService.sendCommand(command);

      if (response.success) {
        _updatePlaybackState(
          status: PlaybackStatus.stopped,
          currentContentId: null,
          position: Duration.zero,
        );
        return true;
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: $e');
      }
    }

    return false;
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
  Future<bool> setVolume(double volume) async {
    if (!_authService.hasPermission(FreeDomePermission.controlBasics)) {
      return false;
    }

    try {
      final command = FreeDomeCommand(
        type: 'set_volume',
        data: {'volume': volume.clamp(0.0, 1.0)},
        targetSystemId: _connectionService.activeDome?.id,
        sessionId: _authService.currentSession?.id,
        timestamp: DateTime.now(),
      );

      final response = await _connectionService.sendCommand(command);

      if (response.success) {
        _updatePlaybackState(volume: volume);
        return true;
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏: $e');
      }
    }

    return false;
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è—Ä–∫–æ—Å—Ç–∏
  Future<bool> setBrightness(double brightness) async {
    if (!_authService.hasPermission(FreeDomePermission.controlBasics)) {
      return false;
    }

    try {
      final command = FreeDomeCommand(
        type: 'set_brightness',
        data: {'brightness': brightness.clamp(0.0, 1.0)},
        targetSystemId: _connectionService.activeDome?.id,
        sessionId: _authService.currentSession?.id,
        timestamp: DateTime.now(),
      );

      final response = await _connectionService.sendCommand(command);
      return response.success;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è—Ä–∫–æ—Å—Ç–∏: $e');
      }
      return false;
    }
  }

  /// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<bool> playInteractiveContent({
    required String appName,
    required String contentName,
    required Map<String, dynamic> appData,
  }) async {
    final content = InteractiveContent(
      id: 'interactive_${DateTime.now().millisecondsSinceEpoch}',
      name: contentName,
      appName: appName,
      appData: appData,
      createdAt: DateTime.now(),
    );

    return await playContent(content);
  }

  /// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  Future<bool> playRealtimeContent({
    required String sourceType,
    required Map<String, dynamic> sourceConfig,
    String? contentName,
  }) async {
    final content = RealtimeContent(
      id: 'realtime_${DateTime.now().millisecondsSinceEpoch}',
      name: contentName ?? 'Realtime Content',
      sourceType: sourceType,
      sourceConfig: sourceConfig,
    );

    return await playContent(content);
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –≤—ã—à–µ)
  Future<Playlist?> createPlaylist({
    required String name,
    required List<String> contentIds,
    String? description,
  }) async {
    if (!_authService.hasPermission(FreeDomePermission.manageContent)) {
      return null;
    }

    try {
      final playlist = Playlist(
        id: 'playlist_${DateTime.now().millisecondsSinceEpoch}',
        name: name,
        contentIds: contentIds,
        description: description,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      _playlists.add(playlist);
      await _savePlaylists();
      notifyListeners();

      if (kDebugMode) {
        print('‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω: $name');
      }

      return playlist;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞: $e');
      }
      return null;
    }
  }

  /// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
  Future<bool> playPlaylist(String playlistId) async {
    try {
      final playlist = _playlists.firstWhere((p) => p.id == playlistId);

      if (playlist.contentIds.isEmpty) {
        return false;
      }

      final firstContentId = playlist.contentIds[playlist.currentIndex];
      final content = _contentLibrary.firstWhere((c) => c.id == firstContentId);

      _updatePlaybackState(currentPlaylistId: playlistId);

      return await playContent(content);
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞: $e');
      }
      return false;
    }
  }

  /// –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  List<ProjectionContent> searchContent({
    String? query,
    ContentType? type,
    List<String>? tags,
  }) {
    return _contentLibrary.where((content) {
      bool matches = true;

      if (query != null && query.isNotEmpty) {
        matches = matches &&
            (content.name.toLowerCase().contains(query.toLowerCase()) ||
                (content.description
                        ?.toLowerCase()
                        .contains(query.toLowerCase()) ??
                    false));
      }

      if (type != null) {
        matches = matches && content.type == type;
      }

      if (tags != null && tags.isNotEmpty) {
        matches = matches && tags.any((tag) => content.tags.contains(tag));
      }

      return matches;
    }).toList();
  }

  /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –≤—ã—à–µ)
  Future<ProjectionContent?> addContent({
    required String name,
    required String filePath,
    required ContentType type,
    required Duration duration,
    String? description,
    List<String>? tags,
    ProjectionFormat format = ProjectionFormat.equirectangular,
  }) async {
    if (!_authService.hasPermission(FreeDomePermission.manageContent)) {
      return null;
    }

    try {
      final content = ProjectionContent(
        id: 'content_${DateTime.now().millisecondsSinceEpoch}',
        name: name,
        filePath: filePath,
        type: type,
        duration: duration,
        description: description,
        tags: tags ?? [],
        format: format,
        createdAt: DateTime.now(),
      );

      _contentLibrary.add(content);
      await _saveContentLibrary();
      notifyListeners();

      if (kDebugMode) {
        print('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: $name');
      }

      return content;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: $e');
      }
      return null;
    }
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –≤—ã—à–µ)
  Future<bool> removeContent(String contentId) async {
    if (!_authService.hasPermission(FreeDomePermission.manageContent)) {
      return false;
    }

    try {
      _contentLibrary.removeWhere((content) => content.id == contentId);

      // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
      for (int i = 0; i < _playlists.length; i++) {
        final playlist = _playlists[i];
        final updatedContentIds =
            playlist.contentIds.where((id) => id != contentId).toList();

        if (updatedContentIds.length != playlist.contentIds.length) {
          _playlists[i] = playlist.copyWith(
            contentIds: updatedContentIds,
            updatedAt: DateTime.now(),
          );
        }
      }

      await _saveContentLibrary();
      await _savePlaylists();
      notifyListeners();

      if (kDebugMode) {
        print('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É–¥–∞–ª–µ–Ω: $contentId');
      }

      return true;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: $e');
      }
      return false;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ ID
  ProjectionContent? getContent(String contentId) {
    try {
      return _contentLibrary.firstWhere((content) => content.id == contentId);
    } catch (e) {
      return null;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –ø–æ ID
  Playlist? getPlaylist(String playlistId) {
    try {
      return _playlists.firstWhere((playlist) => playlist.id == playlistId);
    } catch (e) {
      return null;
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
  void _updatePlaybackState({
    PlaybackStatus? status,
    String? currentContentId,
    String? currentPlaylistId,
    Duration? position,
    Duration? duration,
    double? volume,
    double? speed,
    bool? isLooping,
    bool? isMuted,
    String? error,
  }) {
    _playbackState = _playbackState.copyWith(
      status: status ?? _playbackState.status,
      currentContentId: currentContentId ?? _playbackState.currentContentId,
      currentPlaylistId: currentPlaylistId ?? _playbackState.currentPlaylistId,
      position: position ?? _playbackState.position,
      duration: duration ?? _playbackState.duration,
      volume: volume ?? _playbackState.volume,
      speed: speed ?? _playbackState.speed,
      isLooping: isLooping ?? _playbackState.isLooping,
      isMuted: isMuted ?? _playbackState.isMuted,
      error: error,
    );

    _playbackController.add(_playbackState);
    notifyListeners();
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  Future<void> _updateContentStats(dynamic content) async {
    try {
      final index = _contentLibrary.indexWhere((c) => c.id == content.id);
      if (index != -1) {
        _contentLibrary[index] = content.copyWith(
          lastPlayed: DateTime.now(),
          playCount: content.playCount + 1,
        );
        await _saveContentLibrary();
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
      }
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  Future<void> _loadContentLibrary() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final contentJson = prefs.getString('freedome_content_library');

      if (contentJson != null) {
        final contentList = json.decode(contentJson) as List;
        _contentLibrary.clear();
        _contentLibrary.addAll(
          contentList.map((item) => ProjectionContent.fromJson(item)).toList(),
        );
      } else {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
        _loadDemoContent();
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: $e');
      }
      _loadDemoContent();
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
  Future<void> _loadPlaylists() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final playlistsJson = prefs.getString('freedome_playlists');

      if (playlistsJson != null) {
        final playlistsList = json.decode(playlistsJson) as List;
        _playlists.clear();
        _playlists.addAll(
          playlistsList.map((item) => Playlist.fromJson(item)).toList(),
        );
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤: $e');
      }
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  void _loadDemoContent() {
    _contentLibrary.addAll([
      ProjectionContent(
        id: 'demo_starry_sky',
        name: '–ó–≤–µ–∑–¥–Ω–æ–µ –Ω–µ–±–æ',
        filePath: '/content/starry_sky.mp4',
        type: ContentType.video,
        duration: const Duration(minutes: 10),
        description: '–ö—Ä–∞—Å–∏–≤–æ–µ –∑–≤–µ–∑–¥–Ω–æ–µ –Ω–µ–±–æ –¥–ª—è —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏',
        tags: ['–∑–≤–µ–∑–¥—ã', '–∫–æ—Å–º–æ—Å', '—Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è'],
        format: ProjectionFormat.fulldome,
        createdAt: DateTime.now().subtract(const Duration(days: 7)),
      ),
      ProjectionContent(
        id: 'demo_solar_system',
        name: '–°–æ–ª–Ω–µ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
        filePath: '/content/solar_system.mp4',
        type: ContentType.video,
        duration: const Duration(minutes: 15),
        description: '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–ª—å–º –æ –ø–ª–∞–Ω–µ—Ç–∞—Ö',
        tags: ['–ø–ª–∞–Ω–µ—Ç—ã', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–∫–æ—Å–º–æ—Å'],
        format: ProjectionFormat.spherical,
        createdAt: DateTime.now().subtract(const Duration(days: 5)),
      ),
      ProjectionContent(
        id: 'demo_abstract',
        name: '–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ —É–∑–æ—Ä—ã',
        filePath: '/content/abstract_patterns.mp4',
        type: ContentType.video,
        duration: const Duration(minutes: 8),
        description: '–ö—Ä–∞—Å–æ—á–Ω—ã–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ —É–∑–æ—Ä—ã',
        tags: ['–∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è', '—É–∑–æ—Ä—ã', '—Ü–≤–µ—Ç–∞'],
        format: ProjectionFormat.equirectangular,
        createdAt: DateTime.now().subtract(const Duration(days: 3)),
      ),
    ]);
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  Future<void> _saveContentLibrary() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final contentJson = json.encode(
        _contentLibrary.map((content) => content.toJson()).toList(),
      );
      await prefs.setString('freedome_content_library', contentJson);
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: $e');
      }
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
  Future<void> _savePlaylists() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final playlistsJson = json.encode(
        _playlists.map((playlist) => playlist.toJson()).toList(),
      );
      await prefs.setString('freedome_playlists', playlistsJson);
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤: $e');
      }
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  Map<String, dynamic> getUsageStats() {
    final totalPlayCount = _contentLibrary.fold<int>(
      0,
      (sum, content) => sum + content.playCount,
    );

    final mostPlayedContent = _contentLibrary.isNotEmpty
        ? _contentLibrary.reduce((a, b) => a.playCount > b.playCount ? a : b)
        : null;

    return {
      'totalContent': _contentLibrary.length,
      'totalPlaylists': _playlists.length,
      'totalPlayCount': totalPlayCount,
      'mostPlayedContent': mostPlayedContent?.toJson(),
      'currentPlayback': _playbackState.toJson(),
    };
  }

  @override
  void dispose() {
    _playbackController.close();
    super.dispose();
  }
}
