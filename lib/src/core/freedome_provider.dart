import 'package:flutter/foundation.dart';
import 'connection_service.dart';
import 'auth_service.dart';
import 'content_service.dart';
import '../admin/calibration_service.dart';
import '../admin/system_service.dart';
import '../models/dome_models.dart';
import '../models/content_models.dart';

/// –ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä FreeDome - —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
class FreeDomeProvider extends ChangeNotifier {
  static final FreeDomeProvider _instance = FreeDomeProvider._internal();
  factory FreeDomeProvider() => _instance;
  FreeDomeProvider._internal();

  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
  late final FreeDomeConnectionService _connectionService;
  late final FreeDomeAuthService _authService;
  late final FreeDomeContentService _contentService;

  // –ê–¥–º–∏–Ω—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
  FreeDomeCalibrationService? _calibrationService;
  FreeDomeSystemService? _systemService;

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  bool _isInitialized = false;
  bool _isInitializing = false;
  String? _error;

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  FreeDomeConnectionService get connection => _connectionService;
  FreeDomeAuthService get auth => _authService;
  FreeDomeContentService get content => _contentService;

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π)
  FreeDomeCalibrationService? get calibration {
    if (!_authService.hasPermission(FreeDomePermission.calibrateAudio) &&
        !_authService.hasPermission(FreeDomePermission.calibrateProjectors)) {
      return null;
    }
    _calibrationService ??= FreeDomeCalibrationService();
    return _calibrationService;
  }

  FreeDomeSystemService? get system {
    if (!_authService.hasPermission(FreeDomePermission.systemManagement)) {
      return null;
    }
    _systemService ??= FreeDomeSystemService();
    return _systemService;
  }

  // –ì–µ—Ç—Ç–µ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
  bool get isInitialized => _isInitialized;
  bool get isInitializing => _isInitializing;
  String? get error => _error;
  bool get isReady => _isInitialized && !_isInitializing && _error == null;

  // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
  bool get isConnected => _connectionService.isConnected;
  bool get isAuthenticated => _authService.isAuthenticated;
  FreeDomeUserRole get currentRole => _authService.currentRole;
  DomeSystem? get activeDome => _connectionService.activeDome;
  PlaybackState get playbackState => _contentService.playbackState;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FreeDome —Å–∏—Å—Ç–µ–º—ã
  Future<bool> initialize({
    bool autoDiscovery = true,
    FreeDomeUserRole defaultRole = FreeDomeUserRole.guest,
  }) async {
    if (_isInitialized || _isInitializing) {
      return _isInitialized;
    }

    _isInitializing = true;
    _error = null;
    notifyListeners();

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
      _connectionService = FreeDomeConnectionService();
      _authService = FreeDomeAuthService();
      _contentService = FreeDomeContentService();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
      await Future.wait([
        _connectionService.initialize(),
        _authService.initialize(),
        _contentService.initialize(),
      ]);

      // –°–æ–∑–¥–∞–µ–º –≥–æ—Å—Ç–µ–≤—É—é —Å–µ—Å—Å–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (defaultRole == FreeDomeUserRole.guest) {
        await _authService.createGuestSession();
      }

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      _setupServiceListeners();

      _isInitialized = true;
      _isInitializing = false;

      if (kDebugMode) {
        print('‚úÖ FreeDome —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      }

      notifyListeners();
      return true;
    } catch (e) {
      _error = e.toString();
      _isInitializing = false;
      _isInitialized = false;

      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FreeDome: $e');
      }

      notifyListeners();
      return false;
    }
  }

  /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
  void _setupServiceListeners() {
    _connectionService.addListener(() {
      notifyListeners();
    });

    _authService.addListener(() {
      notifyListeners();
      
      // –ü—Ä–∏ —Å–º–µ–Ω–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã
      _calibrationService = null;
      _systemService = null;
    });

    _contentService.addListener(() {
      notifyListeners();
    });
  }

  /// –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–ª–∏–∂–∞–π—à–µ–º—É –∫—É–ø–æ–ª—É
  Future<bool> connectToNearestDome() async {
    if (!_isInitialized) {
      return false;
    }

    final systems = _connectionService.discoveredSystems;
    if (systems.isEmpty) {
      if (kDebugMode) {
        print('‚ùå –ö—É–ø–æ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
      return false;
    }

    // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    final nearestDome = systems.first;
    return await _connectionService.connectToDome(nearestDome);
  }

  /// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫—É–ø–æ–ª—É
  Future<bool> connectToDome(DomeSystem dome) async {
    if (!_isInitialized) {
      return false;
    }

    return await _connectionService.connectToDome(dome);
  }

  /// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∫—É–ø–æ–ª–∞
  Future<void> disconnect() async {
    if (!_isInitialized) {
      return;
    }

    await _connectionService.disconnectFromDome();
  }

  /// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
  Future<bool> authenticateAsAdmin({
    required String username,
    required String password,
  }) async {
    if (!_isInitialized) {
      return false;
    }

    final success = await _authService.authenticateAdmin(
      username: username,
      password: password,
      domeId: activeDome?.id,
    );

    if (success) {
      // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã
      _calibrationService = null;
      _systemService = null;
      notifyListeners();
    }

    return success;
  }

  /// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –≥–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º
  Future<bool> switchToGuestMode() async {
    if (!_isInitialized) {
      return false;
    }

    final success = await _authService.switchToGuestMode();
    
    if (success) {
      // –û—á–∏—â–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã
      _calibrationService = null;
      _systemService = null;
      notifyListeners();
    }

    return success;
  }

  /// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  Future<void> logout() async {
    if (!_isInitialized) {
      return;
    }

    await _authService.logout();
    
    // –û—á–∏—â–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã
    _calibrationService = null;
    _systemService = null;
    
    notifyListeners();
  }

  /// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π API)
  Future<bool> playContent(FreeDomeContent content) async {
    if (!_isInitialized) {
      return false;
    }

    return await _contentService.playContent(content);
  }

  /// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<bool> playAppContent({
    required String appName,
    required String contentName,
    required Map<String, dynamic> appData,
  }) async {
    if (!_isInitialized) {
      return false;
    }

    return await _contentService.playInteractiveContent(
      appName: appName,
      contentName: contentName,
      appData: appData,
    );
  }

  /// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
  Future<bool> pausePlayback() async => 
      _isInitialized ? await _contentService.pausePlayback() : false;

  Future<bool> resumePlayback() async => 
      _isInitialized ? await _contentService.resumePlayback() : false;

  Future<bool> stopPlayback() async => 
      _isInitialized ? await _contentService.stopPlayback() : false;

  /// –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–æ—Å—Ç—É–ø–Ω—ã –≥–æ—Å—Ç—è–º)
  Future<bool> setVolume(double volume) async =>
      _isInitialized ? await _contentService.setVolume(volume) : false;

  Future<bool> setBrightness(double brightness) async =>
      _isInitialized ? await _contentService.setBrightness(brightness) : false;

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  bool hasPermission(FreeDomePermission permission) {
    return _authService.hasPermission(permission);
  }

  bool hasRole(FreeDomeUserRole role) {
    return _authService.hasRole(role);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
  Map<String, dynamic> getSystemStatus() {
    return {
      'isInitialized': _isInitialized,
      'isInitializing': _isInitializing,
      'isReady': isReady,
      'error': _error,
      'connection': _connectionService.connectionStatus.toJson(),
      'auth': _authService.getSessionInfo(),
      'content': _contentService.getUsageStats(),
      'activeDome': activeDome?.toJson(),
    };
  }

  /// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
  Future<void> reset() async {
    try {
      await disconnect();
      await logout();
      
      _isInitialized = false;
      _isInitializing = false;
      _error = null;
      
      // –û—á–∏—â–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã
      _calibrationService = null;
      _systemService = null;
      
      notifyListeners();
      
      if (kDebugMode) {
        print('üîÑ FreeDome —Å–∏—Å—Ç–µ–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞');
      }
    } catch (e) {
      _error = e.toString();
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ FreeDome: $e');
      }
      notifyListeners();
    }
  }

  @override
  void dispose() {
    _connectionService.removeListener(() {});
    _authService.removeListener(() {});
    _contentService.removeListener(() {});
    
    _calibrationService?.dispose();
    _systemService?.dispose();
    
    super.dispose();
  }
}
