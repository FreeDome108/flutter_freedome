import 'dart:convert';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'tax_lien_service.dart';

enum InvestmentRiskLevel { low, medium, high }
enum InvestmentGoal { quickReturn, longTerm, balanced }

class AIAnalysisResult {
  final double riskScore; // 0-100
  final double profitPotential; // 0-100
  final String recommendation;
  final List<String> pros;
  final List<String> cons;
  final InvestmentRiskLevel riskLevel;
  final double expectedROI;
  final int paybackMonths;

  AIAnalysisResult({
    required this.riskScore,
    required this.profitPotential,
    required this.recommendation,
    required this.pros,
    required this.cons,
    required this.riskLevel,
    required this.expectedROI,
    required this.paybackMonths,
  });
}

class AIInvestmentAdvisorService extends ChangeNotifier {
  final Random _random = Random();
  
  // –°–∏–º—É–ª—è—Ü–∏—è AI –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–ª–æ–≥–æ–≤—ã—Ö –∑–∞–∫–ª–∞–¥–Ω—ã—Ö
  Future<AIAnalysisResult> analyzeTaxLien(TaxLien lien) async {
    // –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI
    await Future.delayed(const Duration(milliseconds: 1500));
    
    // –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
    double riskScore = _calculateRiskScore(lien);
    double profitPotential = _calculateProfitPotential(lien);
    InvestmentRiskLevel riskLevel = _determineRiskLevel(riskScore);
    
    return AIAnalysisResult(
      riskScore: riskScore,
      profitPotential: profitPotential,
      recommendation: _generateRecommendation(lien, riskScore, profitPotential),
      pros: _generatePros(lien, profitPotential),
      cons: _generateCons(lien, riskScore),
      riskLevel: riskLevel,
      expectedROI: _calculateExpectedROI(lien),
      paybackMonths: _calculatePaybackMonths(lien),
    );
  }

  double _calculateRiskScore(TaxLien lien) {
    double risk = 0.0;
    
    // –§–∞–∫—Ç–æ—Ä 1: –û—Ç–Ω–æ—à–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–∞ –∫ –æ—Ü–µ–Ω–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    double taxToValueRatio = lien.taxAmount / lien.assessedValue;
    if (taxToValueRatio > 0.05) risk += 20;
    else if (taxToValueRatio > 0.03) risk += 10;
    else risk += 5;
    
    // –§–∞–∫—Ç–æ—Ä 2: –í—Ä–µ–º—è –¥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è
    int monthsToRedemption = lien.redemptionDeadline.difference(DateTime.now()).inDays ~/ 30;
    if (monthsToRedemption < 6) risk += 30;
    else if (monthsToRedemption < 12) risk += 15;
    else risk += 5;
    
    // –§–∞–∫—Ç–æ—Ä 3: –û–∫—Ä—É–≥ (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–∫—Ä—É–≥–∞ –±–æ–ª–µ–µ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–µ)
    Map<String, double> countyRisk = {
      'Columbia': 15,
      'Dixie': 10,
      'Lafayette': 12,
      'Bradford': 20,
      'Polk': 8,
    };
    risk += countyRisk[lien.county] ?? 15;
    
    // –§–∞–∫—Ç–æ—Ä 4: –û—Ü–µ–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–æ—á–µ–Ω—å –¥–æ—Ä–æ–≥–∏–µ –∏–ª–∏ –æ—á–µ–Ω—å –¥–µ—à–µ–≤—ã–µ –±–æ–ª–µ–µ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–µ)
    if (lien.assessedValue > 200000 || lien.assessedValue < 50000) risk += 15;
    else risk += 5;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    risk += _random.nextDouble() * 10;
    
    return risk.clamp(0, 100);
  }

  double _calculateProfitPotential(TaxLien lien) {
    double profit = 0.0;
    
    // –§–∞–∫—Ç–æ—Ä 1: –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞
    profit += lien.interestRate * 3; // 18% = 54 points
    
    // –§–∞–∫—Ç–æ—Ä 2: –û—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫ –Ω–∞–ª–æ–≥—É (–±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º—É—â–µ—Å—Ç–≤–∞)
    double valueToTaxRatio = lien.assessedValue / lien.taxAmount;
    if (valueToTaxRatio > 100) profit += 25;
    else if (valueToTaxRatio > 50) profit += 15;
    else profit += 5;
    
    // –§–∞–∫—Ç–æ—Ä 3: –õ–æ–∫–∞—Ü–∏—è (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–∫—Ä—É–≥–∞ –±–æ–ª–µ–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ)
    Map<String, double> countyProfit = {
      'Polk': 20,
      'Columbia': 15,
      'Dixie': 18,
      'Lafayette': 12,
      'Bradford': 8,
    };
    profit += countyProfit[lien.county] ?? 10;
    
    // –§–∞–∫—Ç–æ—Ä 4: –í—Ä–µ–º—è –¥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
    int daysToAuction = lien.auctionDate.difference(DateTime.now()).inDays;
    if (daysToAuction < 30) profit += 10;
    else if (daysToAuction < 90) profit += 5;
    
    return profit.clamp(0, 100);
  }

  InvestmentRiskLevel _determineRiskLevel(double riskScore) {
    if (riskScore < 30) return InvestmentRiskLevel.low;
    if (riskScore < 60) return InvestmentRiskLevel.medium;
    return InvestmentRiskLevel.high;
  }

  String _generateRecommendation(TaxLien lien, double riskScore, double profitPotential) {
    if (profitPotential > 70 && riskScore < 40) {
      return "üî• –°–ò–õ–¨–ù–ê–Ø –ü–û–ö–£–ü–ö–ê: –û—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –ø—Ä–∏–±—ã–ª–∏ –∏ —É–º–µ—Ä–µ–Ω–Ω—ã–º —Ä–∏—Å–∫–æ–º!";
    } else if (profitPotential > 60 && riskScore < 50) {
      return "‚úÖ –ü–û–ö–£–ü–ö–ê: –•–æ—Ä–æ—à–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å.";
    } else if (profitPotential > 40 || riskScore < 35) {
      return "‚öñÔ∏è –†–ê–°–°–ú–û–¢–†–ï–¢–¨: –£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å. –ò–∑—É—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º —Ä–µ—à–µ–Ω–∏—è.";
    } else if (riskScore > 70) {
      return "‚ö†Ô∏è –í–´–°–û–ö–ò–ô –†–ò–°–ö: –î–∞–Ω–Ω–∞—è –∑–∞–∫–ª–∞–¥–Ω–∞—è –∏–º–µ–µ—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏. –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –∫ –ø–æ—Ç–µ—Ä—è–º.";
    } else {
      return "‚ùå –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–Æ: –ù–∏–∑–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø—Ä–∏–±—ã–ª–∏ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∏—Å–∫–∞—Ö.";
    }
  }

  List<String> _generatePros(TaxLien lien, double profitPotential) {
    List<String> pros = [];
    
    if (lien.interestRate >= 18) {
      pros.add("–í—ã—Å–æ–∫–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ${lien.interestRate}%");
    }
    
    double valueToTaxRatio = lien.assessedValue / lien.taxAmount;
    if (valueToTaxRatio > 50) {
      pros.add("–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å/–Ω–∞–ª–æ–≥ (${valueToTaxRatio.toStringAsFixed(1)}:1)");
    }
    
    if (lien.county == "Polk" || lien.county == "Dixie") {
      pros.add("–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π –æ–∫—Ä—É–≥ —Å —Ö–æ—Ä–æ—à–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é");
    }
    
    if (lien.assessedValue > 100000 && lien.assessedValue < 200000) {
      pros.add("–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π");
    }
    
    int monthsToRedemption = lien.redemptionDeadline.difference(DateTime.now()).inDays ~/ 30;
    if (monthsToRedemption > 12) {
      pros.add("–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è");
    }
    
    if (pros.isEmpty) {
      pros.add("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–∞–ª–æ–≥–æ–≤–æ–π –∑–∞–∫–ª–∞–¥–Ω–æ–π");
    }
    
    return pros;
  }

  List<String> _generateCons(TaxLien lien, double riskScore) {
    List<String> cons = [];
    
    double taxToValueRatio = lien.taxAmount / lien.assessedValue;
    if (taxToValueRatio > 0.04) {
      cons.add("–í—ã—Å–æ–∫–∏–π —Ä–∞–∑–º–µ—Ä –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –¥–æ–ª–≥–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏");
    }
    
    int monthsToRedemption = lien.redemptionDeadline.difference(DateTime.now()).inDays ~/ 30;
    if (monthsToRedemption < 8) {
      cons.add("–ö–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫ –¥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è");
    }
    
    if (lien.county == "Bradford") {
      cons.add("–û–∫—Ä—É–≥ —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–µ–π –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö");
    }
    
    if (lien.assessedValue < 60000) {
      cons.add("–ù–∏–∑–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã");
    }
    
    if (lien.assessedValue > 250000) {
      cons.add("–í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–∏—Å–∫–∏");
    }
    
    if (cons.isEmpty && riskScore > 40) {
      cons.add("–£–º–µ—Ä–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞");
    }
    
    return cons;
  }

  double _calculateExpectedROI(TaxLien lien) {
    // –ë–∞–∑–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    double baseROI = lien.interestRate;
    
    // –ë–æ–Ω—É—Å –∑–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å/–Ω–∞–ª–æ–≥
    double valueToTaxRatio = lien.assessedValue / lien.taxAmount;
    if (valueToTaxRatio > 80) baseROI += 5;
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–∫—Ä—É–≥—É
    Map<String, double> countyBonus = {
      'Polk': 2,
      'Dixie': 1,
      'Columbia': 0,
      'Lafayette': -1,
      'Bradford': -2,
    };
    baseROI += countyBonus[lien.county] ?? 0;
    
    return baseROI.clamp(5, 30);
  }

  int _calculatePaybackMonths(TaxLien lien) {
    // –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–≥–∞—à–µ–Ω–∏—è –Ω–∞–ª–æ–≥–æ–≤—ã—Ö –∑–∞–∫–ª–∞–¥–Ω—ã—Ö
    int baseMonths = 8;
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É –¥–æ–ª–≥–∞
    if (lien.taxAmount > 2000) baseMonths += 2;
    if (lien.taxAmount < 1000) baseMonths -= 1;
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–∫—Ä—É–≥—É
    Map<String, int> countyMonths = {
      'Polk': -1,
      'Dixie': 0,
      'Columbia': 1,
      'Lafayette': 1,
      'Bradford': 2,
    };
    baseMonths += countyMonths[lien.county] ?? 0;
    
    return baseMonths.clamp(3, 18);
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
  Future<List<TaxLien>> getPersonalizedRecommendations(
    List<TaxLien> availableLiens,
    InvestmentGoal goal,
    double maxInvestment,
    InvestmentRiskLevel riskTolerance,
  ) async {
    await Future.delayed(const Duration(milliseconds: 800));
    
    List<TaxLien> filtered = List.from(availableLiens);
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –±—é–¥–∂–µ—Ç—É
    filtered = filtered.where((lien) => lien.taxAmount <= maxInvestment).toList();
    
    // –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –∑–∞–∫–ª–∞–¥–Ω–æ–π
    List<MapEntry<TaxLien, AIAnalysisResult>> analyzed = [];
    for (TaxLien lien in filtered) {
      AIAnalysisResult analysis = await analyzeTaxLien(lien);
      
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∏—Å–∫-—Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç–∏
      bool riskMatch = false;
      switch (riskTolerance) {
        case InvestmentRiskLevel.low:
          riskMatch = analysis.riskScore < 40;
          break;
        case InvestmentRiskLevel.medium:
          riskMatch = analysis.riskScore < 70;
          break;
        case InvestmentRiskLevel.high:
          riskMatch = true;
          break;
      }
      
      if (riskMatch) {
        analyzed.add(MapEntry(lien, analysis));
      }
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–ª—è–º –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    analyzed.sort((a, b) {
      switch (goal) {
        case InvestmentGoal.quickReturn:
          return a.value.paybackMonths.compareTo(b.value.paybackMonths);
        case InvestmentGoal.longTerm:
          return b.value.expectedROI.compareTo(a.value.expectedROI);
        case InvestmentGoal.balanced:
          double scoreA = (a.value.profitPotential - a.value.riskScore) / 2;
          double scoreB = (b.value.profitPotential - b.value.riskScore) / 2;
          return scoreB.compareTo(scoreA);
      }
    });
    
    return analyzed.take(5).map((entry) => entry.key).toList();
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞
  Future<MarketInsights> getMarketInsights(List<TaxLien> availableLiens) async {
    await Future.delayed(const Duration(milliseconds: 600));
    
    if (availableLiens.isEmpty) {
      return MarketInsights(
        averageInterestRate: 0,
        averageTaxAmount: 0,
        totalAvailable: 0,
        hotCounties: [],
        marketTrend: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
        recommendedAction: "–î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π",
      );
    }
    
    double avgInterestRate = availableLiens
        .map((l) => l.interestRate)
        .reduce((a, b) => a + b) / availableLiens.length;
    
    double avgTaxAmount = availableLiens
        .map((l) => l.taxAmount)
        .reduce((a, b) => a + b) / availableLiens.length;
    
    // –ü–æ–¥—Å—á–µ—Ç –∑–∞–∫–ª–∞–¥–Ω—ã—Ö –ø–æ –æ–∫—Ä—É–≥–∞–º
    Map<String, int> countyCount = {};
    for (TaxLien lien in availableLiens) {
      countyCount[lien.county] = (countyCount[lien.county] ?? 0) + 1;
    }
    
    List<String> hotCounties = countyCount.entries
        .where((entry) => entry.value >= 2)
        .map((entry) => entry.key)
        .toList();
    
    String trend = _analyzeTrend(availableLiens);
    String action = _getRecommendedAction(availableLiens, avgInterestRate);
    
    return MarketInsights(
      averageInterestRate: avgInterestRate,
      averageTaxAmount: avgTaxAmount,
      totalAvailable: availableLiens.length,
      hotCounties: hotCounties,
      marketTrend: trend,
      recommendedAction: action,
    );
  }

  String _analyzeTrend(List<TaxLien> liens) {
    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    double avgValue = liens.map((l) => l.assessedValue).reduce((a, b) => a + b) / liens.length;
    
    if (avgValue > 150000) {
      return "üìà –†—ã–Ω–æ–∫ –ø—Ä–µ–º–∏—É–º-–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–µ–Ω";
    } else if (avgValue > 100000) {
      return "‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä—ã–Ω–æ–∫ —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏ —Ü–µ–Ω–∞–º–∏";
    } else {
      return "üìâ –ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –±—é–¥–∂–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã";
    }
  }

  String _getRecommendedAction(List<TaxLien> liens, double avgRate) {
    if (liens.length < 3) {
      return "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π";
    } else if (avgRate >= 18) {
      return "üöÄ –û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - –≤—ã—Å–æ–∫–∏–µ —Å—Ç–∞–≤–∫–∏!";
    } else {
      return "‚úÖ –•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–µ–ª–µ–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π";
    }
  }
}

class MarketInsights {
  final double averageInterestRate;
  final double averageTaxAmount;
  final int totalAvailable;
  final List<String> hotCounties;
  final String marketTrend;
  final String recommendedAction;

  MarketInsights({
    required this.averageInterestRate,
    required this.averageTaxAmount,
    required this.totalAvailable,
    required this.hotCounties,
    required this.marketTrend,
    required this.recommendedAction,
  });
}
